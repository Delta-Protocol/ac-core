/*

   public static final short wallet_base = 0;
    public static final short protocol_balance_query = wallet_base+1;
    public static final short protocol_dump_query = wallet_base+2;
    public static final short protocol_new_address_query = wallet_base+3;
    public static final short protocol_add_address_query = wallet_base+4;
    public static final short protocol_tx_make_p2pkh_query = wallet_base+5;
    public static final short protocol_tx_sign_query = wallet_base+6;
    public static final short protocol_tx_send_query = wallet_base+7;
    public static final short protocol_tx_decode_query = wallet_base+8;
    public static final short protocol_tx_check_query = wallet_base+9;
    public static final short protocol_pair_query = wallet_base+10;
    public static final short protocol_unpair_query = wallet_base+11;
    public static final short protocol_list_devices_query = wallet_base+12;

    public static final short protocol_response = wallet_base+0;
*/

#include <iostream>
#include <vector>
using namespace std;


void gen_cpp(const vector<string>& v, ostream& os) {
    os << "//------------------generated by apitool- do not edit" << endl;
    int n=0;
    const string& base=v[0];
    os << "    static constexpr uint16_t " << v[n++] << "{0};" << endl;
    for (;n<v.size();++n) {
        os << "    static constexpr uint16_t " << v[n] << "{" << base << "+" << n << "};" << endl;
    }
    os << "//-/----------------generated by apitool- do not edit" << endl;
}


void gen_java(const vector<string>& v, ostream& os) {
    os << "//------------------generated by apitool- do not edit" << endl;
    int n=0;
    const string& base=v[0];
    os << "    public static final short " << v[n++] << " = 0;" << endl;
    for (;n<v.size();++n) {
        os << "    public static final short protocol_" << v[n] << " = " << base << "+" << n << ";" << endl;
    }
    os << "//-/----------------generated by apitool- do not edit" << endl;
}


void gen_gov_cpp(int mbase, const vector<string>& v, ostream& os) {
    os << "//------------------generated by apitool- do not edit" << endl;
    int n=0;
    const string& base=v[0];
    os << "    static constexpr uint16_t " << v[n++] << "{" << mbase << "};" << endl;
    for (;n<v.size();++n) {
        os << "    static constexpr uint16_t " << v[n] << "{((" << base << "+" << n-1 << ")<<2)+protocol_suffix};" << endl;
    }
    os << "//-/----------------generated by apitool- do not edit" << endl;
}
void gen_gov_java(int mbase, const vector<string>& v, ostream& os) {
    os << "//------------------generated by apitool- do not edit" << endl;
    int n=0;
    const string& base=v[0];
    os << "    public static final short gov_" << v[n++] << " = " << mbase << ";" << endl;
    for (;n<v.size();++n) {
        os << "    public static final short gov_" << v[n] << " = ((gov_" << base << "+" << n-1 << ")<<2)+protocol_suffix;" << endl;
    }
    os << "//-/----------------generated by apitool- do not edit" << endl;
}

void gen_gov(int base, const vector<string>& v, ostream& os) {
    cout << "C++" << endl;
    gen_gov_cpp(base,v,os);
    cout << "files affected:" << endl;
    cout << "  gov/id/protocol.h" << endl;
    cout << endl;

    cout << "java" << endl;

    gen_gov_java(base,v,os);
    cout << "files affected:" << endl;
    cout << "  sdk/java/src/wallet.h" << endl;
    cout << endl;

}

int protocol_main() {

vector<string> f{ "wallet_base","balance_query","list_query",
    "new_address_query","add_address_query","tx_make_p2pkh_query",
    "tx_sign_query","tx_send_query","tx_decode_query",
    "tx_check_query","pair_query","unpair_query","list_devices_query",
    "ping","response" };


vector<string> gov_id{
    "id_base",
    "id_request",
    "id_peer_challenge",
    "id_challenge_response",
    "id_peer_status"
};


    cout << "-------------wallet" << endl;
   
    cout << "C++" << endl;
    gen_cpp(f,cout);
    cout << "files affected:" << endl;
    cout << "  wallet/protocol.h" << endl;
    cout << endl;

    cout << "java" << endl;
    gen_java(f,cout);
    cout << "files affected:" << endl;
    cout << "  sdk/java/src/Wallet.java" << endl;


    cout << "-------------gov" << endl;
    cout << "" << endl;
    cout << "-------------gov::id" << endl;
    gen_gov(200,gov_id,cout);

    return 0;
}

    struct f: vector<string>  {
        typedef vector<string> args;
        string name;
        static f from_stream(istream& is) {
            f r;        
            int n;
            is >> r.name;
            is >> n;
            if (r.name.empty()) {
                return r;
            }
            string dummy;
            getline(is,dummy);    
            r.reserve(n);
            for (int i=0; i<n; ++i) {
                string line;
                getline(is,line);    
                if (!line.empty()) {
                    r.push_back(line);
                }
            }
            r.push_back("ostream&");
            return r;
        }
        void gen_cpp_purevir(ostream& os) const {
            os << "  virtual void " << name << "(";
            if (!empty()) {
                auto e=end();
                --e;
                for (auto i=cbegin(); i!=e; ++i) {
                    os << *i << ", ";
                }
               os << *rbegin();
            }
           os << ")=0;" << endl;
            
        }
        void gen_cpp_override(ostream& os) const {
            os << "  virtual void " << name << "(";
            if (!empty()) {
                auto e=end();
                --e;
                for (auto i=cbegin(); i!=e; ++i) {
                    os << *i << ", ";
                }
               os << *rbegin();
            }
           os << ") override;" << endl;
            
        }
    };


struct api_t: vector<f> {
    static api_t from_stream(istream&is) {
        api_t api;
        while (is.good()) {
            f i=f::from_stream(is);
            if (!is.good()) {
                break;
            }
            api.push_back(i);
        }
        return api;
    }

        void gen_cpp_purevir(auto header, auto footer, ostream& os) const {
//            os << "//------------------generated by apitool- do not edit" << endl;
            header(os);
            for (auto&i:*this) {
                i.gen_cpp_purevir(os);
            }
            footer(os);
//            os << "//-/----------------generated by apitool- do not edit" << endl;
        }
    void gen_cpp_override(ostream&os) const {
            for (auto&i:*this) {
                i.gen_cpp_override(os);
            }
    }
};


#include <fstream>
#include <functional>

void print_cpp_purevir_api(const string&file, auto h, auto f, auto fa, ostream& os) {
    ifstream is(file);
    api_t api=api_t::from_stream(is);
    api.gen_cpp_purevir(h,f,os);
    //os << "files affected:" << endl;
    //fa(os);
}

void print_cpp_override_api(const string&file, ostream& os) {
    ifstream is(file);
    api_t api=api_t::from_stream(is);
    api.gen_cpp_override(os);
    //os << "files affected:" << endl;
    //fa(os);
}

void include_snippet(const string& file,ostream&os) {
    ifstream f(file);
    while(f.good()) {
        string line;
        getline(f,line);
        os << line << endl;
    }
}

void print_pairing_purevir_api(ostream&os) {
    print_cpp_purevir_api("data/pairing/cpp",[](ostream& os) {
            os << "struct pairing {" << endl;
            os << "  typedef us::gov::crypto::ec::keys::pub_t pub_t;" << endl;
            os << "  virtual ~pairing() {}" << endl;
        }, [](ostream& os) {
            os << "};" << endl;
        }, [](ostream& os) {
            os << "  wallet/pairing.h" << endl;
        }, os);

}

void print_wallet_purevir_api(ostream&os) {
    print_cpp_purevir_api("data/wallet/cpp", [](ostream& os) {
            os << "struct wallet {" << endl;
            os << "  typedef us::gov::crypto::ec::keys::priv_t priv_t;" << endl;
            os << "  typedef us::gov::crypto::ec::keys::pub_t pub_t;" << endl;
            os << "  typedef us::gov::cash::tx::sigcode_t sigcode_t;" << endl;
            include_snippet("data/wallet/tx_make_p2pkh_input.h",os);
            os << "  virtual ~wallet() {}" << endl;
        }, [](ostream& os) {
            os << endl;
            os << "  void gen_keys(ostream&os);" << endl;
            os << "  static void priv_key(const priv_t& privkey, ostream&);" << endl;
            os << "};" << endl;
        }, [](ostream& os) {
            os << "  wallet/wallet.h" << endl;
        }, os);

}

void print_pairing_override_api(ostream&os) {
    print_cpp_override_api("data/pairing/cpp", os);
}

void print_wallet_override_api(ostream&os) {
    print_cpp_override_api("data/wallet/cpp", os);
}

void gen_wallet_header() {
cout << "writting file ../api/wallet.h" << endl;
    ofstream os("../api/wallet.h");
    os << "//------------------file generated by apitool- do not edit" << endl;
    os << "#ifndef USGOV_497697419e3194fe9f1a4519160c25c0171553596e75be377926e72888ef3aec" << endl;
    os << "#define USGOV_497697419e3194fe9f1a4519160c25c0171553596e75be377926e72888ef3aec" << endl;
    os << endl;
    os << "#include <us/gov/crypto.h>" << endl;
    os << "#include <us/gov/cash.h>" << endl;
    os << endl;
    os << "namespace us{ namespace api {" << endl;
    os << "using namespace std;" << endl;
    os << endl;
    print_wallet_purevir_api(os);
    os << "}}" << endl;
    os << "#endif" << endl;
}

void gen_pairing_header() {
cout << "writting file ../api/pairing.h" << endl;
    ofstream os("../api/pairing.h");
    os << "//------------------file generated by apitool- do not edit" << endl;
    os << "#ifndef USGOV_a8ed513060f3355979cf12e45d55c7d01e80c4163cbd3f3bb5a964805cc18913" << endl;
    os << "#define USGOV_a8ed513060f3355979cf12e45d55c7d01e80c4163cbd3f3bb5a964805cc18913" << endl;
    os << endl;
    os << "#include <us/gov/crypto.h>" << endl;
    os << endl;
    os << "namespace us{ namespace api {" << endl;
    os << "using namespace std;" << endl;
    os << endl;
    print_pairing_purevir_api(os);
    os << "}}" << endl;
    os << "#endif" << endl;
}

int main(int argc, char**argv) {
    
    gen_wallet_header();    
    gen_pairing_header();    

{
cout << "writting file ../api/wallet_functions_cpp_override" << endl;
ofstream os("../api/wallet_functions_cpp_override");
print_wallet_override_api(os);
}
{
cout << "writting file ../api/pairing_functions_cpp_override" << endl;
ofstream os("../api/pairing_functions_cpp_override");
print_pairing_override_api(os);
}


}

/*




        void gen_keys(ostream&os);
        static void priv_key(const priv_t& privkey, ostream&);
    };

*/
